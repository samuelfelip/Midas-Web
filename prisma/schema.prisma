model Tool {
  id          String   @id @default(uuid())
  name        String
  description String
  type        ToolType
  config      Json     // Para almacenar configuración específica de cada herramienta
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ToolType {
  CALCULATOR
  INDICATOR
  CONVERTER
  ANALYZER
}

// Actualizar el modelo User para incluir roles
model User {
  // ... existing user fields ...
  role        Role     @default(USER)
}

enum Role {
  ADMIN
  USER
}

model Package {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  courses     Course[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model Cart {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  courseId  String?
  course    Course?  @relation(fields: [courseId], references: [id])
  packageId String?
  package   Package? @relation(fields: [packageId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  items     Json     // Guardamos los items como JSON para mantener histórico
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
} 